#!/usr/bin/luanode
--#!/usr/bin/lua5.1
--#!/usr/bin/luajit

-- == NodeMCU/Linux ==
--
-- Copyright (c) 2018 by Rene K. Mueller <spiritdude@gmail.com>
--
-- License: MIT (see LICENSE file)
--
-- Description: 
--   see http://github.com/Spiritdude/nodemcu-linux
-- Notes:
--    luajit has built-in ffi(), but function(...) arg isn't set, but needs `arg = {...}`
--    lua5.1 requires 3rd party luaffifb for ffi(), and it does function(...) arg set
--
-- History:
-- 2018/03/09: 0.0.6: parse command-line arguments (options etc)
-- 2018/03/05: 0.0.5: luanode tests: timers work fine, luanode.net not yet used
-- 2018/02/27: 0.0.3: 'nodemcu' takes arguments and are executed
-- 2018/02/25: 0.0.2: dofile() redefined so ./ and /usr/local/lib/nodemcu paths are considered (easier dev process)
-- 2018/02/24: 0.0.1: first version: node, tmr, file, gpio and rtctime with very reduced functionality

APPNAME = "NodeMCU/Linux"
VERSION = '0.0.6'

dofile = function(fn)                       -- we redefine so we extend it in manners we need 
   for i,k in pairs({'./','/usr/local/lib/nodemcu/'}) do
      local fnf
      if io.open(k..fn) then
         fnf = k..fn
      end
      if arg[-1]:match("luanode") and io.open(k..fn:gsub("%.lua","-node.lua")) then
         fnf = k..fn:gsub("%.lua","-node.lua")
      end
      if fnf then
         if tmr and _syslog then       -- might not be available yet
            _syslog.print(_syslog.INFO,"dofile "..fnf)
         end
         local f = assert(loadfile(fnf))
         return f()
      end
   end
   _syslog.print(_syslog.ERROR,"file "..fn.." not found to execute")
   return nil
end
                                            
dofile("modules/base/base.lua")

local opts = { }
local k2f = { v = 'verbose', h = 'help', s = 'silent' }
local _arg = { }

for k,v in pairs(arg) do               -- parse all command line arguments (including -1 and 0)
   if k > 0 then
      if v:match("^%-(%w+)$") then            -- single char switch
         local kx = v:match("^%-(%w+)$")
         for i=1,kx:len() do
            local a = kx:sub(i,i)
            opts[k2f[a] or a] = (opts[k2f[a] or a] or 0) + 1
         end
      elseif v:match("^%-%-([%w%.]+)$") then       -- long switch
         local kx, vx = v:match("^%-%-([%w%.]+)$")
         opts[kx] = opts[kx] or 1
      elseif v:match("^%-%-([%w%.]+)=(.*)$") then  -- key=value assignment
         local kx, vx = v:match("^%-%-([%w%.]+)=(.*)$")
         opts[kx] = vx
      else
         table.insert(_arg,v)
      end
   else
      _arg[k] = v
   end
end

arg = _arg

if opts.help then 
   print(APPNAME .. " " .. VERSION .. [[ USAGE: nodemcu {[options] .. } {[file1] .. }
   options:
      -v or -vv            increase verbosity
      --verbose=<n>        define verbosity n = 0..10
      -h or --help         print this usage help
      -s or --silent       silent
      --version            display version and exit
      --package.path=<p>   define or add package path, use '+' to add additional path
      
   examples:
      nodemcu                    boot and execute init.lua and enter Lua console
      nodemcu --version          
      nodemcu --help
      nodemcu -vvv 
      nodemcu --verbose=3
      nodemcu test.lua           boot and execute test.lua and exit
      nodemcu --package.path=+./
]])
   os.exit()
elseif opts.version then
   print(APPNAME,VERSION)
   os.exit()
end

if opts.verbose and opts.verbose > 3 then
   print("opts:")
   table.foreach(opts,function(k,v) print("\t",k,'=',v) end)
   print("arg:")
   table.foreach(arg,function(k,v) print("\t",k,'=',v) end)
end

_syslog.verbose(opts.verbose or 0)

-- Lua modules
dofile("modules/node/node.lua")
dofile("modules/tmr/tmr.lua")
_syslog.print(_syslog.INFO,"loading modules ('node' and 'tmr' already loaded)")     -- only at this point we have functionality for _syslog.print() 
--dofile("modules/wifi/wifi.lua")
dofile("modules/file/file.lua")
dofile("modules/gpio/gpio.lua")
dofile("modules/i2c/i2c.lua")
dofile("modules/net/net.lua")
dofile("modules/uart/uart.lua")
dofile("modules/rtctime/rtctime.lua")
dofile("modules/sjson/sjson.lua")

-- inherent built-in modules
bit = require("bit")
table.insert(node.modules,"bit")

struct = require("struct")
table.insert(node.modules,"struct")

--ffi = require("ffi")
--table.insert(node.modules,"ffi")

_syslog.print(_syslog.INFO,"modules bit, struct built-in added")

if math then
   table.insert(node.modules,"math")
   _syslog.print(_syslog.INFO,"module math added")
end

if opts['package.path'] then
   local p = opts['package.path']
   if p:match("^%+") then
      package.path = package.path .. ":" .. p:match("^%+(.*)")
   else
      package.path = p
   end
   _syslog.print(_syslog.INFO,"package.path: "..package.path)
end

-- gather CPU info
_sysinfo = { }
local f = io.popen("lscpu")
repeat 
   local t = f:read("*line")
   if t then
      local k, v = t:match("([^:]+):%s+(.+)$")
      k = k:lower()
      k = k:gsub("%(s%)","s")
      k = k:gsub(" ","_")
      _sysinfo[k] = v
   end
until t==nil
f:close()
--table.foreach(_sysinfo,print)

local bnr = ""
if false then
   local bfn = 'misc/banner.co.txt'
   if file.exists(bfn) then
      local f = file.open(bfn,"r")
      bnr = bnr .. f:read('*all')
      f:close()
   end
end

bnr = bnr .. APPNAME.." "..VERSION.." powered by ".._VERSION..", "..string.format("Device ID: %d / 0x%x",node.chipid(),node.chipid())
bnr = bnr .. "\n   " .. _sysinfo.architecture..(_sysinfo.model_name and " ".._sysinfo.model_name or "").." (".._sysinfo.cpus.." core(s)"..(_sysinfo.cpu_max_mhz and ", "..int(_sysinfo.cpu_min_mhz).."-"..int(_sysinfo.cpu_max_mhz).."MHz" or "")..")"
bnr = bnr .. "\n   " .. "modules: "
for i,v in ipairs(node.modules) do
   bnr = bnr .. (i>1 and " " or "") .. v
end

if not opts.silent then
   print(bnr)
   if node._cpufreq then
      print("   cpu freq table [MHz]: "..table.concat(node._cpufreq,", "))
   end
end

if file.exists("init.lua") then
   _syslog.print(_syslog.INFO,"execute init.lua")
   dofile("init.lua")
else
   _syslog.print(_syslog.WARN,"cannot open 'init.lua'")
end


if false then
   local _tmr = coroutine.create(tmr._run_all)
   while true do              -- wasteful tmr.create():* testing
      coroutine.resume(_tmr)
   end
end

--table.foreach(arg,print)
if #arg >= 1 then
   for i=1,#arg do 
      local f = dofile(arg[i])
      if type(f)=='function' then
         f()
      end
   end
else 
   --print("== Lua console started (CTRL-C and then RETURN will exit console)")
   if arg[-1]:match("luanode") then
      require("luanode.tty")
      local stdin = luanode.tty.ReadStream(Stdio.stdinFD)
      local stdout = luanode.tty.WriteStream(Stdio.stdoutFD)
      stdout:write("> ")
      stdin:on("data",function(self,s)
         local f = loadstring(s)
         local r
         if type(f)=='function' then
            r = f()
         else
            r = f
         end
         stdout:write("> ")
      end)
      stdin:resume()
      process:loop()
   else 
      while true do
         io.write("> ")
         local s = io.read()
         local f = loadstring(s)
         local r
         if type(f)=='function' then
            r = f()
         else
            r = f
         end
         if r then
            r = tostring(r)
            if r:match("%n$") then
               io.write("> "..r)
            else
               io.write(": "..r.."\n")
            end
         end
      end
   end
end
